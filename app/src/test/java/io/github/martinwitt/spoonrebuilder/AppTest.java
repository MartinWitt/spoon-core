/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.github.martinwitt.spoonrebuilder;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import org.checkerframework.checker.units.qual.C;
import org.junit.jupiter.api.Test;
import spoon.Launcher;
import spoon.reflect.declaration.CtType;
import spoon.reflect.reference.CtTypeReference;
import spoon.reflect.visitor.filter.TypeFilter;
import spoon.support.compiler.VirtualFile;

class AppTest {

    
    @Test
    void foo() {
        String code = """
                    import java.util.List;
                    import java.util.Set
                class Bar {

                }
                abstract class Foo {
                    abstract <C extends Set<Bar<?>>> C setConstructors(Set<Bar<?>> constructors);
                }
                """;
        Launcher launcher = new Launcher();
        launcher.addInputResource(new VirtualFile(code));
        // launcher.addProcessor(new GenericReferenceRemover());
        launcher.buildModel();
        Iterator<CtType<?>> iterator = launcher.getModel().getAllTypes().iterator();
        var foo = iterator.next();
        var bar = iterator.next();
        GenericReferenceRemover referenceRemover = new GenericReferenceRemover();
        referenceRemover.setFactory(launcher.getFactory());
        launcher.getModel().getElements(new TypeFilter<>(CtTypeReference.class))
                .forEach(referenceRemover::process);
        String s = foo.toString();
        String c = bar.toString();
        int a = 3;
    }
}
